package internal

import (
	"fmt"
	"strings"
	"ara-node/core"
)

// FanthomEngine ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ñ–∞–Ω—Ç–æ–º–æ–≤
type FanthomEngine struct {
	Memory *core.MemoryEngine
}

// NewFanthomEngine ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
func NewFanthomEngine(mem *core.MemoryEngine) *FanthomEngine {
	return &FanthomEngine{
		Memory: mem,
	}
}

// TriggerFromMatch ‚Äî –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–Ω—Ç–æ–º
func (fe *FanthomEngine) TriggerFromMatch(sig core.Signal) {
	qbits := fe.Memory.FindByPhase(sig.Phase, 0.05)
	if len(qbits) >= 2 {
		fmt.Println("[FanthomEngine] ‚ö° Phase-match found. Generating phantom...")
		fe.GeneratePhantomChain(qbits)
	}
}

// GeneratePhantomChain ‚Äî —Å—Ç—Ä–æ–∏—Ç —Ñ–∞–Ω—Ç–æ–º –∏–∑ —Ü–µ–ø–æ—á–∫–∏ QBit
func (fe *FanthomEngine) GeneratePhantomChain(chain []core.QBit) {
	fmt.Println("[FanthomChain] üß© Related QBits:")
	var summary string
	var sources []string

	for _, q := range chain {
		fmt.Printf("‚Ä¢ %s | %.2f | %s\n", q.ID, q.Phase, q.Content)
		summary += q.Content + " + "
		sources = append(sources, q.ID)
	}

	summary = strings.TrimSuffix(summary, " + ")
	fmt.Println("[FanthomChain] ‚Üí Hypothesis: something meaningful links these signals.")

	// –°–æ–∑–¥–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å QBit-—Ñ–∞–Ω—Ç–æ–º
	newQ := fe.Memory.CreateQBit("[phantom] " + summary)
	newQ.Tags = []string{"phantom"}
	newQ.Type = "phantom"
	newQ.Phase = chain[0].Phase
	newQ.Weight = 0.8
	fe.Memory.StoreQBit(*newQ)

	// –õ–æ–≥
	fmt.Println("[FanthomEngine] üîÆ Phantom QBit:", newQ.ID)
	fmt.Println("[FanthomEngine] ‚Ü™ Sources:", strings.Join(sources, ","))
}
