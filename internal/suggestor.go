package internal

import (
	"fmt"
	"strings"
	"ara-node/core"
)

// SuggestorEngine ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π/–º—ã—Å–ª–µ–π
type SuggestorEngine struct {
	Memory *core.MemoryEngine
}

// NewSuggestorEngine ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
func NewSuggestorEngine(mem *core.MemoryEngine) *SuggestorEngine {
	return &SuggestorEngine{
		Memory: mem,
	}
}

// SuggestFromQBits ‚Äî –∏—â–µ—Ç —Ü–µ–ø–æ—á–∫–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º—ã—Å–ª—å
func (s *SuggestorEngine) SuggestFromQBits() {
	qbits := s.Memory.FindByTag("user")
	if len(qbits) < 2 {
		return
	}

	// –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤
	var ideas []string
	for _, q := range qbits {
		ideas = append(ideas, q.Content)
		if len(ideas) >= 3 {
			break
		}
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ—Ä–∞–∑—ã
	suggestion := s.GenerateSuggestion(ideas)
	fmt.Println("[Suggestor] üí°", suggestion)
}

// GenerateSuggestion ‚Äî —Å—Ç—Ä–æ–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º—ã—Å–ª–æ–≤
func (s *SuggestorEngine) GenerateSuggestion(ideas []string) string {
	if len(ideas) == 0 {
		return "No suggestion available."
	}
	return fmt.Sprintf("Would you like to explore the idea: \"%s\" + ...?", strings.Join(ideas, " + "))
}
