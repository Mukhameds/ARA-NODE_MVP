package internal

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"
	

	"ara-node/core"
	"ara-node/field"
	"github.com/libp2p/go-libp2p"
	"github.com/libp2p/go-libp2p/core/host"
	"github.com/libp2p/go-libp2p/core/network"
	"github.com/libp2p/go-libp2p/core/peer"
)

const ProtocolID = "/ara/meta/field/1.0.0"

// PeerSync ‚Äî P2P —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–º—ã—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
type PeerSync struct {
	Host       host.Host
	Mem        *core.MemoryEngine
	MetaFields map[string]*field.Matrix // –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è: math, emotion, phantom...
}

func NewPeerSync(mem *core.MemoryEngine, meta map[string]*field.Matrix) (*PeerSync, error) {
	h, err := libp2p.New()
	if err != nil {
		return nil, err
	}
	ps := &PeerSync{
		Host:       h,
		Mem:        mem,
		MetaFields: meta,
	}
	h.SetStreamHandler(ProtocolID, ps.onStream)
	return ps, nil
}

func (ps *PeerSync) onStream(s network.Stream) {
	defer s.Close()

	var incoming map[string]core.QBit
	if err := json.NewDecoder(s).Decode(&incoming); err != nil {
		fmt.Println("[P2P ‚ùå decode]", err)
		return
	}

	fmt.Println("[P2P] üîÑ Incoming QBits:", len(incoming))

	for _, q := range incoming {
		if !ps.isSafeQBit(q) {
			continue
		}

		// –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–º–µ–Ω—ã –µ—Å–ª–∏ –±–æ–ª–µ–µ –≤–µ—Å–æ–º—ã–π
		exist, ok := ps.Mem.QBits[q.ID]
		if !ok || q.Weight > exist.Weight {
			ps.Mem.StoreQBit(q)
		}

		sig := core.SignalFromQBit(q)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ –ø–æ —Å–º—ã—Å–ª—É
		for name, matrix := range ps.MetaFields {
			if hasTag(q.Tags, name) || hasTag(q.Tags, "shared") {
				go matrix.Propagate(sig)
			}
		}
	}
}

func (ps *PeerSync) syncWithPeer(pi peer.AddrInfo) error {
	ctx := context.Background()
	if err := ps.Host.Connect(ctx, pi); err != nil {
		return err
	}
	s, err := ps.Host.NewStream(ctx, pi.ID, ProtocolID)
	if err != nil {
		return err
	}
	defer s.Close()

	shared := map[string]core.QBit{}
	for id, q := range ps.Mem.QBits {
		if ps.isSafeQBit(q) {
			shared[id] = q
		}
	}
	return json.NewEncoder(s).Encode(shared)
}

// isSafeQBit ‚Äî —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (ps *PeerSync) isSafeQBit(q core.QBit) bool {
	blocked := []string{"cli", "debug", "reflex", "archived"}
	for _, b := range blocked {
		if hasTag(q.Tags, b) {
			return false
		}
	}
	return hasTag(q.Tags, "shared") || hasTag(q.Tags, "ethalon") || hasTag(q.Tags, "confirmed")
}

// hasTag ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–≥–∞
func hasTag(tags []string, key string) bool {
	for _, t := range tags {
		if strings.Contains(t, key) {
			return true
		}
	}
	return false
}
