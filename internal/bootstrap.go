package internal

import (
	"bufio"
	"encoding/json"
	"fmt"
	"os"
	"strings"
	"time"

	"ara-node/core"
)

type UserProfile struct {
	Goal       string
	Interest   string
	Help       string
	Role       string
	Difficulty string
	Block      string
	CreatedAt  time.Time
}

// RunBootstrap –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ª–∏ –∏ –º—ã—à–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func RunBootstrap(mem *core.MemoryEngine, dict *core.SignalDictionary) {
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä
	if _, err := os.Stat("data/bootstrap_done.json"); err == nil {
		fmt.Println("üîÅ Bootstrap already completed. Skipping.")
		return
	}

	fmt.Println("üîß ARA Bootstrap Initialization")

	reader := bufio.NewReader(os.Stdin)

	ask := func(question string) string {
		fmt.Print(question + " > ")
		text, _ := reader.ReadString('\n')
		return strings.TrimSpace(text)
	}

	goal := ask("–ö–∞–∫–∞—è —Ç–≤–æ—è —Ü–µ–ª—å –≤ –∂–∏–∑–Ω–∏?")
	interest := ask("–ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?")
	help := ask("–ö–∞–∫ ARA –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ?")
	role := ask("–ö–∞–∫ —Ç—ã —Å–µ–±—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å (—Ä–æ–ª—å)?")
	difficulty := ask("–ß—Ç–æ –¥–∞—ë—Ç—Å—è —Ç–µ–±–µ —Ç—Ä—É–¥–Ω–µ–µ –≤—Å–µ–≥–æ?")
	block := ask("–ß—Ç–æ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å –∏–ª–∏ –∏–∑–±–µ–≥–∞–µ—à—å?")

	// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö QBits ===
	inputs := map[string]string{
		"goal":      goal,
		"interest":  interest,
		"help":      help,
		"role":      role,
		"difficulty": difficulty,
		"block":     block,
	}

	for typ, val := range inputs {
		q := mem.CreateQBit(val)
		q.Type = typ
		q.Tags = []string{"bootstrap", "user", typ}
		mem.StoreQBit(*q)
		dict.LearnFromInput(val)
	}

	// === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è ===
	profile := analyzeCognitiveProfile(goal, interest, help, role)
	qp := mem.CreateQBit(profile)
	qp.Type = "cognitive_profile"
	qp.Tags = []string{"user", "profile", "bootstrap"}
	mem.StoreQBit(*qp)

	// === –í—ã–≤–æ–¥ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω ===
	weak := analyzeWeakness(difficulty, block)
	if weak != "" {
		qw := mem.CreateQBit(weak)
		qw.Type = "weakness"
		qw.Tags = []string{"user", "analysis", "bootstrap"}
		mem.StoreQBit(*qw)
	}

	// === –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ JSON ===
	userProfile := UserProfile{
		Goal:       goal,
		Interest:   interest,
		Help:       help,
		Role:       role,
		Difficulty: difficulty,
		Block:      block,
		CreatedAt:  time.Now(),
	}

	bytes, err := json.MarshalIndent(userProfile, "", "  ")
	if err == nil {
		os.WriteFile("data/user_profile.json", bytes, 0644)
		os.WriteFile("data/bootstrap_done.json", []byte(`true`), 0644)
	}

	fmt.Println("‚úÖ Bootstrap –∑–∞–≤–µ—Ä—à—ë–Ω.")
}

// === –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä: –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
func analyzeCognitiveProfile(goal, interest, help, role string) string {
	var style, pattern string
	var tags []string

	if strings.Contains(goal, "—Å–æ–∑–¥–∞—Ç—å") || strings.Contains(interest, "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏") {
		style = "—Å–∏—Å—Ç–µ–º–Ω—ã–π"
		tags = append(tags, "builder")
	} else if strings.Contains(help, "–ø–æ–¥–¥–µ—Ä–∂–∫–∞") || strings.Contains(role, "–ø—Å–∏—Ö–æ–ª–æ–≥") {
		style = "—ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π"
		tags = append(tags, "support")
	} else {
		style = "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π"
		tags = append(tags, "thinker")
	}

	if strings.Contains(role, "—É—á–µ–Ω–∏–∫") || strings.Contains(goal, "—É—á–∏—Ç—å—Å—è") {
		pattern = "–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ ‚Üí –∞–Ω–∞–ª–∏–∑ ‚Üí –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
		tags = append(tags, "learning")
	} else {
		pattern = "—Ü–µ–ª—å ‚Üí –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
		tags = append(tags, "active")
	}

	return fmt.Sprintf("UserLogicProfile: style=%s, pattern=%s, tags=%s",
		style, pattern, strings.Join(tags, ","))
}

// === –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
func analyzeWeakness(diff, block string) string {
	var res []string

	if strings.Contains(diff, "—Ä–µ—à–µ–Ω–∏—è") || strings.Contains(block, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å") {
		res = append(res, "—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π")
	}
	if strings.Contains(diff, "–∞–±—Å—Ç—Ä–∞–∫—Ç") || strings.Contains(block, "—Ç–µ–æ—Ä–∏—è") {
		res = append(res, "–Ω–∏–∑–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏")
	}
	if strings.Contains(diff, "—Å—Ç—Ä–∞—Ö") || strings.Contains(block, "–æ—à–∏–±–∫–∏") {
		res = append(res, "–±–ª–æ–∫ –∏–∑-–∑–∞ —Å—Ç—Ä–∞—Ö–∞ –æ—à–∏–±–∫–∏")
	}

	if len(res) == 0 {
		return ""
	}
	return "–í—ã—è–≤–ª–µ–Ω—ã —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + strings.Join(res, "; ")
}
