package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"

	"ara-node/config"
	"ara-node/core"
	"ara-node/internal"

	_ "github.com/libp2p/go-libp2p/core/peer"
)

func main() {
	fmt.Println("üß† ARA-NODE CLI started.")

	kernel := config.InitSelfKernel()
	fmt.Println("Agent ID:", kernel.AgentID)

	mem := core.NewMemoryEngine()
	signalDict := core.NewSignalDictionary(mem)

	p2p, err := internal.StartP2P(mem)
	if err != nil {
		fmt.Println("[P2P ‚ùå]", err)
	} else {
		fmt.Println("[P2P] üõ∞Ô∏è Sync active")
	}
	_ = p2p

	signalEngine := core.NewSignalEngine(mem)
	phantom := internal.NewFanthomEngine(mem)
	suggestor := internal.NewSuggestorEngine(mem)
	human := internal.NewHumanNodeEngine(mem)
	ghostField := core.NewGhostField()
	will := core.NewWillEngine(mem)
	will.DesireLoop()

	// –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
	block := &core.Block{
		ID: "UserPhaseBlock",
		Rules: []core.ReactionRule{
			{
				MatchTag: "user",
				MinPhase: 0.8,
				Action: func(sig core.Signal) {
					fmt.Println("[Block Action] üîÅ Reacted to user signal:", sig.Content)
				},
			},
		},
	}
	ghostField.RegisterBlock(block)

	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("\n>> ")
		input, _ := reader.ReadString('\n')
		content := strings.TrimSpace(input)
		if content == "" {
			continue
		}

		// –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–∞—Ä—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
		if content == "dict" {
			for _, vb := range signalDict.All() {
				fmt.Println("üîπ", vb.ID, "|", vb.Tags, "| Reacts:", vb.Reacts)
			}
			continue
		}

		if strings.HasPrefix(content, "tagvar ") {
			parts := strings.Split(content, " ")
			if len(parts) >= 3 {
				signalDict.Tag(parts[1], parts[2])
				fmt.Println("‚úÖ –¢–µ–≥ –¥–æ–±–∞–≤–ª–µ–Ω:", parts[1], "‚Üí", parts[2])
			}
			continue
		}

		if strings.HasPrefix(content, "delvar ") {
			parts := strings.Split(content, " ")
			if len(parts) >= 2 && signalDict.Delete(parts[1]) {
				fmt.Println("‚ùå –£–¥–∞–ª–µ–Ω–æ:", parts[1])
			} else {
				fmt.Println("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ:", parts[1])
			}
			continue
		}

		// –∫–æ–º–∞–Ω–¥—ã –ø–∞–º—è—Ç–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
		if content == "dump" {
			mem.ListQBits()
			continue
		}

		if human.HandleCommand(content) {
			continue
		}

		if content == "sync-push" {
			err := internal.PushMemory(mem)
			if err != nil {
				fmt.Println("[GitSync ‚ùå]", err)
			}
			continue
		}

		if content == "sync-pull" {
			err := internal.PullMemory(mem)
			if err != nil {
				fmt.Println("[GitSync ‚ùå]", err)
			}
			continue
		}

		// üì° –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
		tokens := strings.Fields(strings.ToLower(content))
		for _, token := range tokens {
			vb := signalDict.FindMatch(token)
			if vb == nil {
				vb = signalDict.AutoLearn(token)
			}
			mem.Broadcast(vb.QBit)
		}

		// üöÄ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
		signal := core.Signal{
			ID:        fmt.Sprintf("sig_%d", time.Now().UnixNano()),
			Content:   content,
			Tags:      []string{"user"},
			Timestamp: time.Now(),
			Phase:     0.85,
			Weight:    1.0,
			Origin:    "user",
		}

		reaction := signalEngine.ProcessSignal(signal)

		ghostField.Propagate(signal)
		phantom.TriggerFromMatch(signal)
		suggestor.SuggestFromQBits()
		mem.DecayQBits()
		fmt.Println("[Main] Decaying QBits...")

		fmt.Println("‚Üê", reaction.Response)
		fmt.Println("‚Ü™ Tags:", reaction.Tags)
	}
}
