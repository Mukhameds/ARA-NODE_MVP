package core

import (
	"fmt"
	"strings"
	"time"
)

// ReactionRule ‚Äî –ø—Ä–∞–≤–∏–ª–æ —Ä–µ–∞–∫—Ü–∏–∏ –±–ª–æ–∫–∞ –Ω–∞ –≤—Ö–æ–¥–Ω–æ–π —Å–∏–≥–Ω–∞–ª
type ReactionRule struct {
	MatchTags []string
	MinPhase  float64
	Action    func(sig Signal)
}

// Block ‚Äî –æ–¥–∏–Ω —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å: emotion, reflex, suggestor –∏ —Ç.–¥.
type Block struct {
	Type     string
	Rules    []ReactionRule
	Cooldown time.Duration
	lastFire time.Time
}

func (b *Block) React(sig Signal) bool {
	if time.Since(b.lastFire) < b.Cooldown {
		return false
	}
	for _, r := range b.Rules {
		if tagsMatch(sig.Tags, r.MatchTags) && sig.Phase >= r.MinPhase {
			fmt.Printf("[Ghost] [%s] rule fired on signal: %s\n", b.Type, sig.ID)
			r.Action(sig)
			b.lastFire = time.Now()
			return true
		}
	}
	return false
}

func tagsMatch(signalTags, matchTags []string) bool {
	for _, mt := range matchTags {
		for _, st := range signalTags {
			if strings.Contains(st, mt) {
				return true
			}
		}
	}
	return false
}

// GhostField ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –±–ª–æ–∫–∏
type GhostField struct {
	Blocks []*Block
}

func NewGhostField() *GhostField {
	return &GhostField{Blocks: []*Block{}}
}

// Register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π –±–ª–æ–∫ –≤ —Ä–µ–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Ç—å
func (g *GhostField) Register(blockType string, rule ReactionRule, cooldown time.Duration) {
	block := &Block{
		Type:     blockType,
		Cooldown: cooldown,
		Rules:    []ReactionRule{rule},
	}
	g.Blocks = append(g.Blocks, block)
}

// UnregisterBlock ‚Äî —É–¥–∞–ª—è–µ—Ç –±–ª–æ–∫ –ø–æ —Ç–∏–ø—É
func (g *GhostField) UnregisterBlock(blockType string) {
	var filtered []*Block
	for _, b := range g.Blocks {
		if b.Type != blockType {
			filtered = append(filtered, b)
		} else {
			fmt.Println("[GhostField] üóëÔ∏è Removed Block:", b.Type)
		}
	}
	g.Blocks = filtered
}

// Propagate ‚Äî —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º
func (g *GhostField) Propagate(sig Signal) {
	// —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
	for _, tag := range sig.Tags {
		switch tag {
		case "silent":
			fmt.Println("[GhostField] üîï Silent signal ignored.")
			return
		case "interrupt":
			fmt.Println("[GhostField] üö´ Interrupt signal, halting propagation.")
			return
		case "ethereal":
			fmt.Println("[GhostField] üëª Ethereal signal, observing only.")
			// –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º
		}
	}

	reacted := false
	for _, b := range g.Blocks {
		if b.React(sig) {
			reacted = true
		}
	}
	if !reacted {
		fmt.Printf("[GhostField] ‚ö†Ô∏è No reaction for signal: %s (%v)\n", sig.Content, sig.Tags)
	}
}
