package core

import (
	"fmt"
	"strings"
	"unicode/utf8"
)

// HeuristicScore ‚Äî –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–≥–Ω–∞–ª–∞ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞
func HeuristicScore(content string) float64 {
	if content == "" {
		return 0.0
	}

	score := 0.0
	length := utf8.RuneCountInString(content)

	// 1. –°–∏–º–º–µ—Ç—Ä–∏—è
	runes := []rune(content)
	symmetric := true
	for i := 0; i < length/2; i++ {
		if runes[i] != runes[length-1-i] {
			symmetric = false
			break
		}
	}
	if symmetric {
		score += 0.3
		fmt.Println("[Heuristics] üîÅ Symmetry detected")
	}

	// 2. –ü—Ä–æ—Å—Ç–æ—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –±–æ–ª–µ–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã)
	if length <= 5 {
		score += 0.2
		fmt.Println("[Heuristics] üß© Simplicity detected")
	}

	// 3. –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å (–Ω–∞–ª–∏—á–∏–µ =, —Ç–æ—á–µ–∫, –∫—Ä—É–≥–æ–≤, if/then)
	if strings.Contains(content, "=") || strings.Contains(content, ".") || strings.Contains(content, "‚Üí") || strings.Contains(content, "if") {
		score += 0.2
		fmt.Println("[Heuristics] ‚úÖ Completion detected")
	}

	// 4. –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å (–¥–≤–æ–π–Ω—ã–µ —Å–ª–æ–≤–∞/—Å–∏–º–≤–æ–ª—ã)
	words := strings.Fields(content)
	seen := map[string]int{}
	for _, w := range words {
		seen[w]++
	}
	for _, v := range seen {
		if v > 1 {
			score += 0.1
			fmt.Println("[Heuristics] üîÅ Repetition detected")
			break
		}
	}

	// 5. –õ–æ–≥–∏–∫–∞ (—É—Å–ª–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∑–Ω–∞–∫–∏)
	logicKeywords := []string{"and", "or", "if", "then", "not", "cause", "because"}
	for _, kw := range logicKeywords {
		if strings.Contains(content, kw) {
			score += 0.2
			fmt.Println("[Heuristics] üß† Logic keyword detected:", kw)
			break
		}
	}

	if score > 1.0 {
		score = 1.0
	}
	return score
}
