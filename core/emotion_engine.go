package core

import (
	"fmt"
	"sync"
)

// EmotionTrigger ‚Äî —É—Å–ª–æ–≤–∏–µ –∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
type EmotionTrigger struct {
	Tag     string
	PhaseGT float64
	Action  func(sig Signal)
}

// EmotionEngine ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è –∏ —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ —ç–º–æ—Ü–∏–∏
type EmotionEngine struct {
	Rules   []EmotionTrigger
	current []string
	mu      sync.Mutex
}

func NewEmotionEngine() *EmotionEngine {
	return &EmotionEngine{
		Rules:   []EmotionTrigger{},
		current: []string{"neutral"},
	}
}

func (ee *EmotionEngine) AddTrigger(tag string, minPhase float64, action func(sig Signal)) {
	ee.Rules = append(ee.Rules, EmotionTrigger{
		Tag:     tag,
		PhaseGT: minPhase,
		Action:  action,
	})
}

func (ee *EmotionEngine) React(sig Signal) {
	for _, rule := range ee.Rules {
		if Contains(sig.Tags, rule.Tag) && sig.Phase > rule.PhaseGT {

			fmt.Println("[Emotion] üíì Triggered by:", sig.Content)
			rule.Action(sig)
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —ç–º–æ—Ü–∏–∏ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞
			ee.UpdateEmotion(rule.Tag)
		}
	}
}

// CurrentEmotions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
func (ee *EmotionEngine) CurrentEmotions() []string {
	ee.mu.Lock()
	defer ee.mu.Unlock()
	return append([]string{}, ee.current...) // –∫–æ–ø–∏—è —Å—Ä–µ–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
}

// UpdateEmotion –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —ç–º–æ—Ü–∏—é –≤ —Ç–µ–∫—É—â–∏–µ, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
func (ee *EmotionEngine) UpdateEmotion(emotion string) {
	ee.mu.Lock()
	defer ee.mu.Unlock()

	for _, e := range ee.current {
		if e == emotion {
			return
		}
	}
	ee.current = append(ee.current, emotion)
	fmt.Println("[EmotionEngine] Updated emotions:", ee.current)
}

// ClearEmotions –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —ç–º–æ—Ü–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
func (ee *EmotionEngine) ClearEmotions() {
	ee.mu.Lock()
	defer ee.mu.Unlock()
	ee.current = []string{"neutral"}
	fmt.Println("[EmotionEngine] Emotions cleared")
}

// –ë–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
func DefaultEmotionSet(ee *EmotionEngine) {
	ee.AddTrigger("joy", 0.7, func(sig Signal) {
		fmt.Println("[Emotion] üòä Joyful signal received.")
		ee.UpdateEmotion("joy")
	})
	ee.AddTrigger("frustration", 0.6, func(sig Signal) {
		fmt.Println("[Emotion] üò£ Frustration building up.")
		ee.UpdateEmotion("frustration")
	})
	ee.AddTrigger("fear", 0.6, func(sig Signal) {
		fmt.Println("[Emotion] üò® Fear detected.")
		ee.UpdateEmotion("fear")
	})
	ee.AddTrigger("anger", 0.6, func(sig Signal) {
		fmt.Println("[Emotion] üò† Anger detected.")
		ee.UpdateEmotion("anger")
	})
}

