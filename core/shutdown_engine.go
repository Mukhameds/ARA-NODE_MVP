package core

import (
	"fmt"
	"sync"
	"time"
)

// ShutdownEngine —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –º–æ–¥—É–ª–µ–π –≤ —Å–ª—É—á–∞–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–ª–∞–ø—Å–∞

type ShutdownEngine struct {
	Active           bool
	SignalMass       float64
	Threshold        float64
	CriticalModules  []string
	ShutdownLog      []string
	Mutex            sync.Mutex
	StepDelay        time.Duration
	OnModuleShutdown func(string)
}

func NewShutdownEngine(threshold float64, stepDelay time.Duration) *ShutdownEngine {
	return &ShutdownEngine{
		Active:          false,
		SignalMass:      1.0,
		Threshold:       threshold,
		CriticalModules: []string{"suggestor", "reflex", "phantom", "attention", "emotion", "will", "ghost", "signal"},
		ShutdownLog:     []string{},
		StepDelay:       stepDelay,
	}
}

// UpdateMass –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑–æ–≤—É—é –º–∞—Å—Å—É —Å–∏—Å—Ç–µ–º—ã (—Å—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–æ–Ω–∞–Ω—Å–æ–≤ / —Å–º—ã—Å–ª–æ–≤)
func (se *ShutdownEngine) UpdateMass(current float64) {
	se.Mutex.Lock()
	defer se.Mutex.Unlock()
	se.SignalMass = current
	if current < se.Threshold && !se.Active {
		fmt.Println("[ShutdownEngine] ‚ö†Ô∏è Critical signal mass detected! Initiating collapse...")
		se.Active = true
		go se.StartCollapse()
	}
}

// StartCollapse ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π
func (se *ShutdownEngine) StartCollapse() {
	for _, module := range se.CriticalModules {
		se.ShutdownLog = append(se.ShutdownLog, fmt.Sprintf("Module %s: disabled", module))
		fmt.Printf("[ShutdownEngine] ‚ùå Module %s is shutting down\n", module)
		if se.OnModuleShutdown != nil {
			se.OnModuleShutdown(module)
		}
		time.Sleep(se.StepDelay)
	}
	fmt.Println("[ShutdownEngine] üíÄ ARA-NODE has ceased functioning.")
}

// IsShuttingDown –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
func (se *ShutdownEngine) IsShuttingDown() bool {
	se.Mutex.Lock()
	defer se.Mutex.Unlock()
	return se.Active
}

// Log –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
func (se *ShutdownEngine) Log() []string {
	return se.ShutdownLog
}
