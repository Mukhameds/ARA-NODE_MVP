package core

import (
	"fmt"
	"time"
)

// DecayEvent ‚Äî –ª–æ–≥ –æ–±–Ω—É–ª–µ–Ω–∏—è –∏–ª–∏ –≤—ã–º–∏—Ä–∞–Ω–∏—è —É–∑–ª–∞
type DecayEvent struct {
	ID        string
	Reason    string
	Timestamp time.Time
}

// DecayAnalysisEngine ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å—Ç–∞—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
type DecayAnalysisEngine struct {
	Log []DecayEvent
	Mem *MemoryEngine
}

func NewDecayAnalysisEngine(mem *MemoryEngine) *DecayAnalysisEngine {
	return &DecayAnalysisEngine{
		Log: []DecayEvent{},
		Mem: mem,
	}
}

func (de *DecayAnalysisEngine) RunDecayCheck() {
	for id, q := range de.Mem.QBits {
		if q.Archived && q.Weight < 0.05 {
			delete(de.Mem.QBits, id)
			de.Log = append(de.Log, DecayEvent{
				ID:        id,
				Reason:    "fully decayed",
				Timestamp: time.Now(),
			})
			fmt.Println("[Decay] ‚ò†Ô∏è Removed:", id)
		}
	}
}

func (de *DecayAnalysisEngine) PrintDecayLog() {
	if len(de.Log) == 0 {
		fmt.Println("[DecayLog] üîπ –ü–∞–º—è—Ç—å –µ—â—ë –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–ª–∞—Å—å –æ—á–∏—Å—Ç–∫–µ.")
		return
	}
	fmt.Println("[DecayLog] üß© Deleted QBits:")
	for _, entry := range de.Log {
		fmt.Printf("‚è± %s | %s | %s\n", entry.Timestamp.Format(time.RFC822), entry.ID, entry.Reason)
	}
}
