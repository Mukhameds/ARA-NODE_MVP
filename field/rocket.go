package field

import (
	"fmt"
	"ara-node/core"
)

// GhostRocket ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
type GhostRocket struct {
	Fields []*Matrix
	Name   string
}

// NewGhostRocket ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é "—Ä–∞–∫–µ—Ç—É" –∏–∑ –ø–æ–ª–µ–π
func NewGhostRocket(name string) *GhostRocket {
	return &GhostRocket{
		Name:   name,
		Fields: []*Matrix{},
	}
}

// AddField ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ
func (r *GhostRocket) AddField(matrix *Matrix) {
	r.Fields = append(r.Fields, matrix)
	fmt.Printf("[Rocket:%s] üöÄ Field '%s' added.\n", r.Name, matrix.Name)
}

// Propagate ‚Äî –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
func (r *GhostRocket) Propagate(sig core.Signal) {
	fmt.Printf("[Rocket:%s] üöÄ Propagating signal: %s (%v)\n", r.Name, sig.ID, sig.Tags)
	for _, f := range r.Fields {
		go f.Propagate(sig)
	}
}

// ListFields ‚Äî –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
func (r *GhostRocket) ListFields() {
	fmt.Printf("[Rocket:%s] üåå Connected Fields:\n", r.Name)
	for _, f := range r.Fields {
		fmt.Printf("- %s (%d blocks)\n", f.Name, len(f.Blocks))
	}
}
