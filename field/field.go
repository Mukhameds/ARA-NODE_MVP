package field

import (
	"fmt"
	"strings"
	"sync"
	"time"

	"ara-node/core"
)

// ReactionRule ‚Äî –ø—Ä–∞–≤–∏–ª–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±–ª–æ–∫ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–∏–≥–Ω–∞–ª
type ReactionRule struct {
	MatchTags []string              // –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
	MinPhase  float64               // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞
	Action    func(sig core.Signal) // —Ä–µ–∞–∫—Ü–∏—è
}

// Block ‚Äî —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å (–º–æ–∑–≥–æ–≤–æ–π —É–∑–µ–ª)
type Block struct {
	Type     string
	Rules    []ReactionRule
	Cooldown time.Duration
	lastFire time.Time
	lock     sync.Mutex
}

// CanReact ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –±–ª–æ–∫ —Å–µ–π—á–∞—Å —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å (–ø–æ cooldown)
func (b *Block) CanReact() bool {
	b.lock.Lock()
	defer b.lock.Unlock()
	return time.Since(b.lastFire) >= b.Cooldown
}

// MarkReacted ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
func (b *Block) MarkReacted() {
	b.lock.Lock()
	defer b.lock.Unlock()
	b.lastFire = time.Now()
}

// React ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –±–ª–æ–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func (b *Block) React(sig core.Signal) {
	if !b.CanReact() {
		return
	}

	triggered := false
	for _, r := range b.Rules {
		if tagsMatch(sig.Tags, r.MatchTags) && sig.Phase >= r.MinPhase {
			go r.Action(sig)
			fmt.Printf("[Field] [%s] rule fired on signal: %s\n", b.Type, sig.ID)
			triggered = true
		}
	}
	if triggered {
		b.MarkReacted()
	}
}

// Matrix ‚Äî —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø–æ–ª–µ (—ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç GhostField)
type Matrix struct {
	Name   string
	Blocks []*Block
}

// NewMatrix ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –ø–æ–ª–µ
func NewMatrix(name string) *Matrix {
	return &Matrix{
		Name:   name,
		Blocks: []*Block{},
	}
}

// RegisterBlock ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –≤ –±–ª–æ–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫
func (m *Matrix) RegisterBlock(blockType string, rule ReactionRule, cooldown time.Duration) {
	for _, b := range m.Blocks {
		if b.Type == blockType {
			b.Rules = append(b.Rules, rule)
			return
		}
	}
	m.Blocks = append(m.Blocks, &Block{
		Type:     blockType,
		Cooldown: cooldown,
		Rules:    []ReactionRule{rule},
	})
}

// Propagate ‚Äî —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ –≤—Å–µ–π –º–∞—Ç—Ä–∏—Ü–µ
func (m *Matrix) Propagate(sig core.Signal) {
	for _, tag := range sig.Tags {
		switch tag {
		case "silent":
			fmt.Printf("[Field:%s] üîï Silent signal skipped.\n", m.Name)
			return
		case "interrupt":
			fmt.Printf("[Field:%s] üö´ Interrupt signal received, skipping.\n", m.Name)
			return
		}
	}

	for _, b := range m.Blocks {
		go b.React(sig)
	}
}

// tagsMatch ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ (—Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ)
func tagsMatch(signalTags, matchTags []string) bool {
	for _, mt := range matchTags {
		for _, st := range signalTags {
			if strings.Contains(st, mt) {
				return true
			}
		}
	}
	return false
}
